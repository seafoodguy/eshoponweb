apiVersion: v1
kind: Service
metadata:
  name: eshoponweb
  labels:
    app: eshoponweb
spec:
  ports:
    - port: 8080
  selector:
    app: eshoponweb
    tier: frontend
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: eshoponweb
  labels:
    app: eshoponweb
spec:
  replicas: 3
  selector:
    matchLabels:
      app: eshoponweb
      tier: frontend
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: eshoponweb
        tier: frontend
    spec:
      containers:
      - image: harbor.alfredshek.fun/nke/eshoponweb:version
        name: eshoponwebmvc
        ports:
          - containerPort: 8080
        #livenessProbe:
        #  httpGet:
        #    path: /
        #    port: 80
        #  initialDelaySeconds: 15
        #  timeoutSeconds: 30
        # resources:
        #   requests:
        #     memory: "10Gi"
        #     cpu: "500m"
        #   limits:
        #     memory: "10Gi"
        #     cpu: "500m"
        env:
          # Define the environment variable
          - name: ENVIRONMENT_NAME # Notice that the case is different here from the key name in the ConfigMap.
            valueFrom:
              configMapKeyRef:
                name: configmap-demo           # The ConfigMap this value comes from.
                key: environment_name          # The key to fetch.
          - name: UI_PROPERTIES_FILE_NAME
            valueFrom:
              configMapKeyRef:
                name: configmap-demo
                key: ui_properties_file_name
        volumeMounts: # you can also mount a ConfigMap as a data volume inside a container
          - name: config
            mountPath: "/config"
            readOnly: true
      volumes:
      # You set volumes at the Pod level, then mount them into containers inside that Pod
      - name: config
        configMap:
          # Provide the name of the ConfigMap you want to mount.
          name: configmap-demo
          # An array of keys from the ConfigMap to create as files. This creates two files. If you omit the items array entirely, every key in the ConfigMap becomes a file with the same name as the key, and you get 4 files
          items:
          - key: "app.properties"
            path: "app.properties"
          - key: "user-interface.properties"
            path: "user-interface.properties"
